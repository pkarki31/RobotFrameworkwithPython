<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1 (Python 3.11.4 on darwin)" generated="20230802 20:41:32.392" rpa="false" schemaversion="4">
<suite id="s1" name="DBTest" source="/Users/ayushisingh/Documents/RobotFrameworkwithPython/TestCases/DBTest.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>pymysql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20230802 20:41:32.410" level="INFO">Connecting using : pymysql.connect(db=robotDB, user=root, passwd=***, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20230802 20:41:32.406" endtime="20230802 20:41:32.420"/>
</kw>
<test id="s1-t1" name="Execute SQL Script - Insert Data laptop table" line="22">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<var>${output}</var>
<arg>SQL/${DBName}_insertData.sql</arg>
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230802 20:41:32.421" level="INFO">Executing : Execute SQL Script  |  SQL/robotDB_insertData.sql </msg>
<msg timestamp="20230802 20:41:32.421" level="INFO">Executing statement from script file: insert into  laptop value ("LAP01","DELL","Dell Latitude 7430","704.99")</msg>
<msg timestamp="20230802 20:41:32.425" level="INFO">Executing statement from script file: insert into  laptop value ("LAP02","DELL","Dell Precision 7520","339.99")</msg>
<msg timestamp="20230802 20:41:32.426" level="INFO">Executing statement from script file: insert into  laptop value ("LAP03","DELL","Dell G15","949.99")</msg>
<msg timestamp="20230802 20:41:32.428" level="INFO">Executing statement from script file: insert into  laptop value ("LAP04","DELL","Dell Precision 7760","1,099.99")</msg>
<msg timestamp="20230802 20:41:32.438" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20230802 20:41:32.421" endtime="20230802 20:41:32.438"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230802 20:41:32.438" level="INFO">None</msg>
<status status="PASS" starttime="20230802 20:41:32.438" endtime="20230802 20:41:32.438"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230802 20:41:32.438" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230802 20:41:32.438" endtime="20230802 20:41:32.438"/>
</kw>
<status status="PASS" starttime="20230802 20:41:32.420" endtime="20230802 20:41:32.438"/>
</test>
<test id="s1-t2" name="Retrieve DELL laptops from Laptop table" line="28">
<kw name="Query" library="DatabaseLibrary">
<var>${queryResults}</var>
<arg>SELECT * FROM laptop where company="DELL";</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230802 20:41:32.438" level="INFO">Executing : Query  |  SELECT * FROM laptop where company="DELL"; </msg>
<msg timestamp="20230802 20:41:32.443" level="INFO">${queryResults} = (('LAP01', 'DELL', 'Dell Latitude 7430', '704.99'), ('LAP02', 'DELL', 'Dell Precision 7520', '339.99'), ('LAP03', 'DELL', 'Dell G15', '949.99'), ('LAP04', 'DELL', 'Dell Precision 7760', '1,099.99'))</msg>
<status status="PASS" starttime="20230802 20:41:32.438" endtime="20230802 20:41:32.443"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230802 20:41:32.444" endtime="20230802 20:41:32.444"/>
</kw>
<status status="PASS" starttime="20230802 20:41:32.438" endtime="20230802 20:41:32.444"/>
</test>
<test id="s1-t3" name="Retrieve DELL XPS laptops from Laptop table" line="32">
<kw name="Query" library="DatabaseLibrary">
<var>${queryResults}</var>
<arg>SELECT * FROM laptop where model_name like '%Latitude%';</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230802 20:41:32.444" level="INFO">Executing : Query  |  SELECT * FROM laptop where model_name like '%Latitude%'; </msg>
<msg timestamp="20230802 20:41:32.446" level="INFO">${queryResults} = (('LAP01', 'DELL', 'Dell Latitude 7430', '704.99'),)</msg>
<status status="PASS" starttime="20230802 20:41:32.444" endtime="20230802 20:41:32.447"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230802 20:41:32.447" endtime="20230802 20:41:32.447"/>
</kw>
<status status="PASS" starttime="20230802 20:41:32.444" endtime="20230802 20:41:32.447"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.
By default it's not an error if there was no open database connection -
suitable for usage as a teardown.
However you can enforce it using the `error_if_no_connection` parameter.</doc>
<msg timestamp="20230802 20:41:32.447" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20230802 20:41:32.447" endtime="20230802 20:41:32.447"/>
</kw>
<status status="PASS" starttime="20230802 20:41:32.393" endtime="20230802 20:41:32.447"/>
</suite>
<statistics>
<total>
<stat pass="3" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="3" fail="0" skip="0" id="s1" name="DBTest">DBTest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
